name: Reusable Kubernetes Deployment for Hetzner

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Target environment for deployment (e.g., staging, production)"
      namespace:
        required: true
        type: string
        description: "Kubernetes namespace for deployment"
      release_name:
        required: true
        type: string
        description: "Helm release name"
      app_root:
        required: true
        type: string
        description: "Root directory of the application"
      chart_name:
        required: true
        type: string
        description: "Name of the Helm chart"
      helm_timeout:
        required: false
        type: string
        default: "10m"
        description: "Timeout for Helm operations"
      kubeconfig_expiry:
        required: false
        type: string
        default: "600"
        description: "Expiry time in seconds for kubeconfig"
      helm_values:
        required: false
        type: string
        description: "Additional Helm values to set during deployment"
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      HETZNER_CONTROL_PLANE_IP:
        required: true
      DATABASE_DSN:
        required: false
      AWS_ACCESS_KEY:
        required: false
      AWS_SECRET_KEY:
        required: false
      AWS_REGION:
        required: false
      REDIS_URL:
        required: false
      PROXIES:
        required: false

jobs:
  deploy:
    name: Deploy to Hetzner Kubernetes cluster ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      HELM_VERSION: 3.17.1
      APP_ROOT: ${{ inputs.app_root }}
      CHART_NAME: ${{ inputs.chart_name }}
      HELM_TIMEOUT: ${{ inputs.helm_timeout }}
      KUBECTL_INSECURE_SKIP_TLS_VERIFY: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure deployment variables
        id: config
        run: |
          CHARTS_DIR="${APP_ROOT}/charts/${CHART_NAME}"
          echo "CHARTS_DIR=${CHARTS_DIR}" >> $GITHUB_OUTPUT
          echo "VALUES_FILE=${APP_ROOT}/charts/${CHART_NAME}/values.${{ inputs.environment }}.yaml" >> $GITHUB_OUTPUT
          echo "BASE_VALUES=${APP_ROOT}/charts/${CHART_NAME}/values.yaml" >> $GITHUB_OUTPUT

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure Helm
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm dependency build ${{ steps.config.outputs.CHARTS_DIR }}

      - name: Set up SSH and get kubeconfig
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          CONTROL_PLANE_IP: ${{ secrets.HETZNER_CONTROL_PLANE_IP }}
        run: |
          # Create SSH directory and set permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Save the private key to a file
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add host key checking exception
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          
          echo "Copying kubeconfig from Hetzner server..."
          
          # Create local kubeconfig directory
          mkdir -p ~/.kube
          
          # Copy kubeconfig from server to runner
          scp root@${CONTROL_PLANE_IP}:/etc/rancher/k3s/k3s.yaml ~/.kube/config
          
          # Update server address in kubeconfig to use the external IP
          sed -i "s/127.0.0.1/${CONTROL_PLANE_IP}/g" ~/.kube/config
          
          # Add insecure-skip-tls-verify: true to the kubeconfig
          echo "Setting insecure-skip-tls-verify in kubeconfig..."
          sed -i '/certificate-authority-data/d' ~/.kube/config
          sed -i '/user:/a\    insecure-skip-tls-verify: true' ~/.kube/config
          
          # Test connection to the cluster
          echo "Testing Kubernetes connection..."
          kubectl cluster-info --insecure-skip-tls-verify
          kubectl get nodes --insecure-skip-tls-verify

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ inputs.namespace }} --dry-run=client -o yaml --insecure-skip-tls-verify | kubectl apply -f - --insecure-skip-tls-verify

      - name: Deploy to cluster
        run: |
          HELM_CMD="helm"
          RELEASE_STATUS=$(helm status ${{ inputs.release_name }} -n ${{ inputs.namespace }}  --insecure-skip-tls-verify --kube-insecure-skip-tls-verify 2>&1 || true)

          if echo "$RELEASE_STATUS" | grep -q "not found"; then
            echo "ðŸš€ Performing fresh installation..."
            HELM_CMD="$HELM_CMD install ${{ inputs.release_name }}"
          else
            echo "ðŸ”„ Performing upgrade..."
            HELM_CMD="$HELM_CMD upgrade ${{ inputs.release_name }}"
          fi

          # Build helm set arguments for secrets
          HELM_SET_ARGS=""
          if [ ! -z "${{ secrets.DATABASE_DSN }}" ]; then
            HELM_SET_ARGS="$HELM_SET_ARGS --set config.database.dsn='${{ secrets.DATABASE_DSN }}'"
          fi
          if [ ! -z "${{ secrets.AWS_ACCESS_KEY }}" ]; then
            HELM_SET_ARGS="$HELM_SET_ARGS --set config.aws.accessKey='${{ secrets.AWS_ACCESS_KEY }}'"
          fi
          if [ ! -z "${{ secrets.AWS_SECRET_KEY }}" ]; then
            HELM_SET_ARGS="$HELM_SET_ARGS --set config.aws.secretKey='${{ secrets.AWS_SECRET_KEY }}'"
          fi
          if [ ! -z "${{ secrets.AWS_REGION }}" ]; then
            HELM_SET_ARGS="$HELM_SET_ARGS --set config.aws.region='${{ secrets.AWS_REGION }}'"
          fi
          if [ ! -z "${{ secrets.REDIS_URL }}" ]; then
            HELM_SET_ARGS="$HELM_SET_ARGS --set config.redis.dsn='${{ secrets.REDIS_URL }}'"
          fi

          $HELM_CMD ${{ steps.config.outputs.CHARTS_DIR }} \
            --values ${{ steps.config.outputs.BASE_VALUES }} \
            --values ${{ steps.config.outputs.VALUES_FILE }} \
            $HELM_SET_ARGS \
            --namespace ${{ inputs.namespace }} \
            --create-namespace \
            --timeout ${{ env.HELM_TIMEOUT }} \
            --insecure-skip-tls-verify \
            --kube-insecure-skip-tls-verify  \
            --wait

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ inputs.release_name }} \
            -n ${{ inputs.namespace }} \
            --timeout=${{ env.HELM_TIMEOUT }} \
            --insecure-skip-tls-verify

      - name: Deployment summary
        if: always()
        run: |
          echo "âœ¨ Deployment Summary"
          echo "Environment: ${{ inputs.environment }}"
          echo "Namespace: ${{ inputs.namespace }}"
          echo "Release: ${{ inputs.release_name }}"
          echo "Chart: ${{ steps.config.outputs.CHARTS_DIR }}"
          echo "Target: Hetzner Kubernetes"